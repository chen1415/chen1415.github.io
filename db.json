{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/images/alipay.png","path":"images/alipay.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"3fa7b231a073f634f565235154b60c71a23ab99d","modified":1644740339179},{"_id":"source/_data/footer.njk","hash":"972bf19ecff7b6fbc8bf1a71b13fdd0392326510","modified":1638679602772},{"_id":"source/_data/languages.yml","hash":"79d6baba2087edf99fe7a14a8cd3b391c6db2985","modified":1638679602772},{"_id":"source/_data/styles.styl","hash":"4e6eb5dd865dcda3da53db594d2ea9bb213df9ca","modified":1638679602772},{"_id":"source/_data/sidebar.njk","hash":"71cce5b6f89cf69474938fc9755f927b508c521e","modified":1638679602772},{"_id":"source/_data/variables.styl","hash":"f3345c5b6f0db2ffdd36368b2065adce97a5f0bc","modified":1638679602772},{"_id":"source/_posts/Hexo + next踩坑.md","hash":"f808cb09b6d5c48621bec019f97cde91caaddd6d","modified":1638679602773},{"_id":"source/_posts/JavaScript深入理解.md","hash":"3086bc2cb45d9d8dc34e7af2d46752d8cf38f774","modified":1638679602773},{"_id":"source/about/index.md","hash":"aad76eb20f770f1fce24a0e6a02dfd9c44fcedac","modified":1638679602773},{"_id":"source/categories/index.md","hash":"a718acdfaf0bc65e0624b93b330d6f76b7bcf959","modified":1638679602773},{"_id":"source/tags/index.md","hash":"8b4d3796038f23c8f11542e28aa1bd294ff73e66","modified":1638679602773},{"_id":"themes/next/.DS_Store","hash":"010adca4038a7097ee3eb02e28cdf943c984bac2","modified":1644740339181},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1638679602792},{"_id":"themes/next/.eslintrc.json","hash":"9c0762486f24a8c5e60f8b6c875e4c4728942649","modified":1638679602792},{"_id":"themes/next/.gitignore","hash":"263b2953b7159c14ff44bb97c9966fdefbe23dcc","modified":1638679602792},{"_id":"themes/next/.npmignore","hash":"b5753ace1856548855d1f2c31c05da85781629e6","modified":1638679602793},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1638679602793},{"_id":"themes/next/LICENSE.md","hash":"63ea7df5a8dc1b23cc92ca9de3ed16d53367f360","modified":1638679602793},{"_id":"themes/next/.gitattributes","hash":"ec43734985e1cafd53d88ded3020103f7416123c","modified":1638679602792},{"_id":"themes/next/README.md","hash":"f373cc6b97311ecfdcc1d2cb279faf6560de1cc6","modified":1638679602793},{"_id":"themes/next/_config.yml","hash":"a362c64dde9f9d4d1c1832598bfdb8b754af0ec4","modified":1638679602793},{"_id":"themes/next/_vendors.yml","hash":"ac81898536eeda4384be0a18a621c5a8659cbc51","modified":1638679602793},{"_id":"themes/next/package.json","hash":"f2802846088cbe369b5b6fabb50631ced94b61c0","modified":1638679602809},{"_id":"themes/next/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1638679602809},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1638679602794},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1638679602794},{"_id":"themes/next/docs/LICENSE.txt","hash":"8ef5fc1147c196680b06e1accab80c8d236ab951","modified":1638679602794},{"_id":"themes/next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1638679602794},{"_id":"themes/next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1638679602795},{"_id":"themes/next/languages/ar.yml","hash":"7a62243ec54196e3d1bea7364f05aded490bc234","modified":1638679602796},{"_id":"themes/next/languages/de.yml","hash":"dc448f724c7d436233e9567711a09e0d56e60e3b","modified":1638679602796},{"_id":"themes/next/languages/default.yml","hash":"48a76170d70ef7c1fac96720bc5064b43061708d","modified":1638679602796},{"_id":"themes/next/languages/en.yml","hash":"48a76170d70ef7c1fac96720bc5064b43061708d","modified":1638679602796},{"_id":"themes/next/languages/es.yml","hash":"c3506dfaa771e827ae6adb322477c6e835cd0f09","modified":1638679602796},{"_id":"themes/next/languages/fa.yml","hash":"649823297167b902455c0aec8ddebb462df71c7d","modified":1638679602796},{"_id":"themes/next/languages/fr.yml","hash":"8ddfe98e7847ee8f1eaba9119f9fbdc42d7ec120","modified":1638679602796},{"_id":"themes/next/languages/id.yml","hash":"ac018805190bc4bdc06091f5a6444e612fc700b0","modified":1638679602796},{"_id":"themes/next/languages/ja.yml","hash":"fec1e1c15ad2df7ed1249173cc719ccba6d3b842","modified":1638679602797},{"_id":"themes/next/languages/it.yml","hash":"82a93c32b3fcf6517441cdc73f75bc6173beb392","modified":1638679602797},{"_id":"themes/next/languages/ko.yml","hash":"8342df2f4190ba4ee004b70d1d6ccd341033dbe7","modified":1638679602797},{"_id":"themes/next/languages/nl.yml","hash":"0d3b56613197cb190900311507535db41daec7d4","modified":1638679602797},{"_id":"themes/next/languages/pt-BR.yml","hash":"47daeaa23c4db073e77761c9a6f62d3932af06ec","modified":1638679602797},{"_id":"themes/next/languages/pt.yml","hash":"e0e2675261e2e80f7ce7d19c945c08217b068d81","modified":1638679602797},{"_id":"themes/next/languages/ru.yml","hash":"fdf5c623890db24cb56ab5ffe0c49db3542477c8","modified":1638679602797},{"_id":"themes/next/languages/tr.yml","hash":"54de3d8d85e3c7b14b163c3d322411b7301a09b3","modified":1638679602798},{"_id":"themes/next/languages/uk.yml","hash":"1c9a0b8d8160c77cc62064207d57f460f365cae9","modified":1638679602798},{"_id":"themes/next/languages/vi.yml","hash":"1f9657b58e11db21f93eb895c90123b8f91751a7","modified":1638679602798},{"_id":"themes/next/languages/zh-CN.yml","hash":"6f7c742316c96d5b71da50fddfb060ff7ec1ea99","modified":1638679602798},{"_id":"themes/next/languages/zh-HK.yml","hash":"149fccd0afdbc8db76e372cbc73d7b5f07bb7515","modified":1638679602798},{"_id":"themes/next/languages/zh-TW.yml","hash":"d534f321ee0c235e1ebfea383eb1892bbd7d7e95","modified":1638679602798},{"_id":"themes/next/layout/_layout.njk","hash":"bf7e6ca826b6c3f85e14da61d56d7b836d2414c4","modified":1638679602798},{"_id":"themes/next/layout/archive.njk","hash":"08885f48d5878c92c910f8c41e3209eb07b9b80e","modified":1638679602808},{"_id":"themes/next/layout/category.njk","hash":"434fc2b27120ebae91522002eb40e16f2158bd4f","modified":1638679602808},{"_id":"themes/next/layout/index.njk","hash":"d8fa14549fa061e7bdba4ec1472cb45ecea96382","modified":1638679602808},{"_id":"themes/next/layout/page.njk","hash":"4f8f377e4f5511e27de1c2e4a1c13374b6a5d9bd","modified":1638679602809},{"_id":"themes/next/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":1638679602809},{"_id":"themes/next/layout/tag.njk","hash":"09075c80b53b06826e7eb9ce838bca9dc363fac1","modified":1638679602809},{"_id":"themes/next/scripts/renderer.js","hash":"c53dbede2ad5f68d7349bc5ed8ac7157d723e987","modified":1638679602812},{"_id":"themes/next/source/.DS_Store","hash":"0a6eb1e8f0a90287b5d57183f66cfbcee9eb9efa","modified":1644740334080},{"_id":"themes/next/test/index.js","hash":"6bf0289846538be3e9a63809af98f00e1fbdd90b","modified":1638679602836},{"_id":"themes/next/test/.DS_Store","hash":"b3b7adc4fb9584fbd0d891db5be241063de4bf8e","modified":1644740328508},{"_id":"themes/next/docs/ru/README.md","hash":"6da6d8e75eab558630b7c6a2e5a80dc981362f47","modified":1638679602795},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"0e204dde6d21f100cba6ca7751de71848490759e","modified":1638679602795},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"8ee5ca39ac4a372a5c0f16e344bbe578af4aeae4","modified":1638679602795},{"_id":"themes/next/docs/zh-CN/README.md","hash":"b5adf2afa918e2eb1000d63e0d8928a524829a35","modified":1638679602795},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1638679602799},{"_id":"themes/next/layout/_macro/post.njk","hash":"f381d4c485ae484a114040d5654db648e4ac7473","modified":1638679602799},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"3481594d36df9eb5e220a6b981d3e5630376a597","modified":1638679602799},{"_id":"themes/next/layout/_partials/comments.njk","hash":"334e8d8117a46c8c097788811322a62627952219","modified":1638679602799},{"_id":"themes/next/layout/_partials/footer.njk","hash":"9c69b85c9ad86ef5c11d2245f91d98f1be248c40","modified":1638679602800},{"_id":"themes/next/layout/_partials/languages.njk","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1638679602801},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1638679602802},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"24eb5b683310810f93c1d7f68f8f70f1a29fd217","modified":1638679602803},{"_id":"themes/next/layout/_third-party/baidu-push.njk","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1638679602805},{"_id":"themes/next/layout/_third-party/index.njk","hash":"4ca039707745c6a22615741b7411ff2cb0763e6d","modified":1638679602806},{"_id":"themes/next/layout/_third-party/nprogress.njk","hash":"271139c3896a6d294f46f767cb21b2e848050841","modified":1638679602807},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"294b7f6a4fa566e369d8be0ce7b28f35b6c14563","modified":1638679602807},{"_id":"themes/next/layout/_third-party/rating.njk","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1638679602807},{"_id":"themes/next/layout/_scripts/index.njk","hash":"48cbbca0e4f97b8c25f2a5c408071603cd257a65","modified":1638679602804},{"_id":"themes/next/layout/_scripts/noscript.njk","hash":"4f250d0bf80be06dd2c95c1d4c2ba2624b59cf2a","modified":1638679602804},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"bada07da2a47ed6de6081796367b19dd9e906cfb","modified":1638679602804},{"_id":"themes/next/layout/_scripts/pjax.njk","hash":"28a3bcb1ce50924a5a48b0f3756ac3a8736867f1","modified":1638679602804},{"_id":"themes/next/scripts/events/index.js","hash":"89091bc943cd8b8c63b8af3d26fb0a027048e9ba","modified":1638679602809},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1638679602811},{"_id":"themes/next/scripts/filters/locals.js","hash":"fa1e558f058f93455acdd553ab1be30b26f137e4","modified":1638679602811},{"_id":"themes/next/scripts/filters/minify.js","hash":"be0574c64a38210e449c99d38a760452015060a3","modified":1638679602811},{"_id":"themes/next/scripts/filters/post.js","hash":"bac5646993153f9f6a630c9f0052bb17fa760a9c","modified":1638679602812},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bbcf0d846d9ddcf968bf4ad179ff7da5dd70867f","modified":1638679602812},{"_id":"themes/next/scripts/helpers/font.js","hash":"9cf01a3cf62d9b5a1a0db8145088774bf94045c8","modified":1638679602812},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"3b2261da74c7b33cabfbc82cbb3ce9c8046314d4","modified":1638679602812},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"577c510374cf9bcfa8d3a1027e42411a9324805e","modified":1638679602812},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1638679602812},{"_id":"themes/next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1638679602813},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1638679602813},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1638679602813},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"9836e3212f889e94ada4c354c7b83f7d7caa9aa7","modified":1638679602813},{"_id":"themes/next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":1638679602813},{"_id":"themes/next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1638679602813},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"9e2c58d1a4d1dd84fa86144e5b4576b2fd10a37f","modified":1638679602813},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"464effc08e757ce8e1bb094707d06ad829af9d62","modified":1638679602813},{"_id":"themes/next/scripts/tags/note.js","hash":"05be417a17385a31e1a021e1a54b15046cfd8408","modified":1638679602814},{"_id":"themes/next/scripts/tags/pdf.js","hash":"27129fc4014d723ba93ac77b11342da2ee445d96","modified":1638679602814},{"_id":"themes/next/scripts/tags/tabs.js","hash":"2bf00d56b3b289a7dd27e9b5820430a2457a19f3","modified":1638679602814},{"_id":"themes/next/scripts/tags/video.js","hash":"911851fb3a56570b761d133a6e1531ebf864ea83","modified":1638679602814},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1638679602832},{"_id":"themes/next/source/images/avatar.png","hash":"54b4ef400a561bc281ff76a38a0265330fc8ec3b","modified":1638679602832},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1638679602832},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1638679602832},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1638679602832},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1638679602832},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1638679602833},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1638679602833},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1638679602833},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1638679602833},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1638679602833},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1638679602833},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1638679602833},{"_id":"themes/next/source/css/_colors.styl","hash":"b37f9847d2f95632e911df670b51921a7d748068","modified":1638679602814},{"_id":"themes/next/source/css/_mixins.styl","hash":"b9c3d3087a917c94cf34ffd6621528d377af8fc9","modified":1638679602827},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1638679602831},{"_id":"themes/next/source/js/algolia-search.js","hash":"a6f78c4cfffa976e4b8043e3486ce99aaba02bda","modified":1638679602834},{"_id":"themes/next/source/js/bookmark.js","hash":"e45e1fbb7c6d645e9c410759486216e570d02bef","modified":1638679602834},{"_id":"themes/next/source/js/local-search.js","hash":"0a66cec43424ce8f8eb182b583e92ee15a61dcc7","modified":1638679602834},{"_id":"themes/next/source/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1638679602834},{"_id":"themes/next/source/js/next-boot.js","hash":"da67f3eed604dcdc4e89280c9db69fe1f62818e9","modified":1638679602835},{"_id":"themes/next/source/js/schedule.js","hash":"ababd67895ce49049271601c6928fce56a1c6bbb","modified":1638679602835},{"_id":"themes/next/source/js/utils.js","hash":"eed4ec020dbf499b6479cbe4e1a90b0b4fe4d1e8","modified":1638679602835},{"_id":"themes/next/test/helpers/font.js","hash":"8930b1f16facc18dc6764bf6efd753ca50d3f1cb","modified":1638679602835},{"_id":"themes/next/test/helpers/index.js","hash":"63ba28afed697f7b3574436b1133b8ecc9c0c357","modified":1638679602836},{"_id":"themes/next/test/helpers/next-url.js","hash":"abc4ee5149df6172b2c36b6e85d1993ec748ddea","modified":1638679602836},{"_id":"themes/next/test/tags/button.js","hash":"48f2aa4c513e9e24bd6a811410520b74cd7ea88b","modified":1638679602836},{"_id":"themes/next/test/tags/caniuse.js","hash":"aa5e728445caeaf7c2ccd0f3fcb2cad0c93ca6d1","modified":1638679602836},{"_id":"themes/next/test/tags/center-quote.js","hash":"7667342fd1a1417eaf6a254012b84ae40e8d13dd","modified":1638679602836},{"_id":"themes/next/test/tags/group-pictures.js","hash":"caf9f6b9a72e41fb30aa24468a54496fba1fcdd8","modified":1638679602836},{"_id":"themes/next/test/tags/index.js","hash":"e8779e54f0979b221858f8bb74dd081bb503b910","modified":1638679602837},{"_id":"themes/next/test/tags/label.js","hash":"4ebf3698c258ca978b997acbdd0dece44069c09d","modified":1638679602837},{"_id":"themes/next/test/tags/link-grid.js","hash":"88ec69e4dc1d493d21254ed9296a2514e91f0f8b","modified":1638679602837},{"_id":"themes/next/test/tags/mermaid.js","hash":"ed5b5a70ee49842501c952c4d62483f1fc8eba6b","modified":1638679602837},{"_id":"themes/next/test/tags/note.js","hash":"1b6bac741212e7ca763ab7f92ed2d4e2868126f4","modified":1638679602837},{"_id":"themes/next/test/tags/pdf.js","hash":"bac003317e5bb5e046848522c5c4a7cf231e53f6","modified":1638679602837},{"_id":"themes/next/test/tags/tabs.js","hash":"d63722919f9da2e44d6b952801e10a2915ea9c12","modified":1638679602837},{"_id":"themes/next/test/tags/video.js","hash":"43aaebbc60f19aa69c03b212afff4c4a3fc3b862","modified":1638679602837},{"_id":"themes/next/test/validate/index.js","hash":"ef716c1db8e3c93c320f73b6da4010e03b4eb0ae","modified":1638679602838},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"37bdf020591feb0cf72327c9efd755bf78a0afd6","modified":1638679602800},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"9fb4fdaa447b331cff2964a30d7c3f5340817dfc","modified":1638679602800},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"c082a16163d1fb5d7cf858fb7522fca9d18f1ba6","modified":1638679602800},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"53895b3af95667edc5bf5d7356f8a2b4fe091447","modified":1638679602800},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"c9390824b57f23b7c8a5c23a9834514123673766","modified":1638679602801},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"75a158a5b54a3a76ee6590f5e0e2dd4a9f0be869","modified":1638679602801},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1638679602800},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"1b6f08cd884081cc67f02c09ce4696c2df4a9d20","modified":1638679602801},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1638679602801},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"789915339a6234d6dd7c710cc1f8e728d9b81d35","modified":1638679602801},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"9d650333160ad1977fe42d9770869ff1660a95fe","modified":1638679602801},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1638679602801},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":1638679602802},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"1d1eba50a28518dea5bba34b2737cfb9b0f2cf49","modified":1638679602802},{"_id":"themes/next/layout/_partials/post/post-footer.njk","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1638679602802},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"fbdb5cdbd80970f201f5c75369eaa00aea369235","modified":1638679602802},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1638679602802},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"a9bb52d0537d27cfe670d80e716da6780786ab8a","modified":1638679602802},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"a27b994ab99c684765895ffebf72ae30dcfa0703","modified":1644763706608},{"_id":"themes/next/layout/_partials/search/algolia-search.njk","hash":"c2ccaac9caeea1a43dc31f4f8368f8f548aab0af","modified":1638679602803},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"b7a66a465e897c27624f0c441375c95c4cb7a5aa","modified":1638679602803},{"_id":"themes/next/layout/_partials/search/localsearch.njk","hash":"90156f42d6e6e326ed38482d6623a0aac0352016","modified":1638679602803},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1638679602804},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"ad197fd728dd7ac90f910fdf80ce848eab3ff187","modified":1638679602804},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"d87df68dff14cfb4d91a77230cd1ac795c2a22d5","modified":1638679602805},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1638679602804},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1638679602805},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1638679602805},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"5c2cd9b6f02bcb6248d3f18638a58e329fe8c0d1","modified":1638679602805},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"cc1450d62d76e59968bdd25836694b8339207384","modified":1638679602805},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"54eab4840443262432ec7c47e56e9859ace2a902","modified":1638679602805},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"ec0474e23ca122b34858ffb0bb8c99f241749c61","modified":1638679602806},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"6252b0353c6a36d03c68ebec1073293442221bd1","modified":1638679602806},{"_id":"themes/next/layout/_third-party/comments/valine.njk","hash":"ae2cca696dba96dda7958f0d2b642257599dc11c","modified":1638679602806},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"b0efe26601037e621b5cb16f0fe2f347ee27acdb","modified":1638679602806},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"a8239f99b316e6c060bad8173be3a25c67138697","modified":1638679602806},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"b6746dfad32cc8a46ff8f4194a7a16ca41744803","modified":1638679602806},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"97035261aa85c7d39c6ce1211cdefc6248c0446d","modified":1638679602807},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1638679602807},{"_id":"themes/next/layout/_third-party/search/swiftype.njk","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1638679602807},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1638679602807},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.njk","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1638679602807},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"8b956fb56284e8fa4a4731b1efd1f25e1b2b4a78","modified":1638679602808},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"b70157965285a8c1e003c570cfd4b40bcc1fa719","modified":1638679602808},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"7f01be99413143c5158bda6d83d72bfae6ea5864","modified":1638679602808},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"007da98b913a62946c03a87f8fa25b3db856caa1","modified":1638679602808},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"67d80a57f6b2cf23d56276ca8f30f25e3e8707e9","modified":1638679602808},{"_id":"themes/next/scripts/events/lib/config.js","hash":"545ebbd9f5aeb9f7a8e23737664c1f7d701275e1","modified":1638679602809},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1638679602810},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"7b0ea8d28ced63977dc6539920eb044b1098adcb","modified":1638679602810},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"e227174a8ebab8d5b6e8e26faf4fd66c43f045ca","modified":1638679602810},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"f76c7e13fc4304f86260068c9d83d3477b64ee4b","modified":1638679602810},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"199fa9a70914d0019cf0e47f55491183d53d1533","modified":1638679602810},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1638679602810},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1638679602810},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"a9b18b7447cd5a56cb692c574463a27356eb7fa6","modified":1638679602811},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7b8ce8e9a71cf083f5337fb7c9586be8f7c316e8","modified":1638679602811},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"387e59cd396c62fe095b388c8ff8d4191cfbdeb9","modified":1638679602811},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"1198cb63375a53400431c2e65e3361416cdf8eb6","modified":1638679602811},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"c67984fc868d4799b3aa6d3b3cd060e5260b3a98","modified":1638679602811},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"77dddb398fb1beefc2b824bec7b094030fdc3df9","modified":1638679602830},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1638679602830},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1638679602830},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c65536a128b9bc9dbe2fbb1b235a3cded2891002","modified":1638679602830},{"_id":"themes/next/source/css/_variables/base.styl","hash":"efbeee48d208a3960b4e352fab3feb2b2dab7ef8","modified":1638679602830},{"_id":"themes/next/source/js/schemes/muse.js","hash":"d7a6c12bb534810eb748d0ba28aff67cccf0bb3f","modified":1638679602835},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d4809783ded05625675b1b4bbd9e99d7f5f7d7f9","modified":1638679602814},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"1c75a837faae9aa2d0a5f30d2078aa8d2ccc2552","modified":1638679602815},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"92915560810c0311dada43ed629b8fc4ff0fc7a4","modified":1638679602814},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"ee8fb8348aa76a9b346927ba4cae5666d8d777f7","modified":1638679602817},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"0c9f72ad98807521cbdcee7b5bbe2e884311db39","modified":1638679602821},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"28368ac06d04ccf0bbf3dc9e0dfcf341c200b28c","modified":1638679602821},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"ea96e86b6bcb160351c18a7edc4a561918a820cb","modified":1638679602823},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1638679602823},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1638679602823},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"a472fb1afc6486266b85f773501a290e0a80c370","modified":1638679602824},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1638679602824},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1638679602824},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"e1c85ab2831fd7d4bb84aea1850a0160be0023e8","modified":1638679602825},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"572a41499391677d84b16d8dbd6a996a3d5ce041","modified":1638679602827},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7ad04d5a02a7618ebb09c1d5a435d46c4df2c620","modified":1638679602827},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"5604ac1e161099a4d3e5657d53507268866dc717","modified":1638679602828},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"06786e1ed8774f8f08cbfc711296cf189aaf1b8c","modified":1638679602827},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f6d165dae928c12bde3f271d299a93b334116433","modified":1638679602828},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"faadd1616a18d626f145e9fbdbfb770deab35b2c","modified":1638679602828},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1638679602828},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"06080fd963c904d96c00eff098a284e337953013","modified":1638679602828},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"82a29572dd90451f75358a2ee2522b87304a0bb8","modified":1638679602829},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c706733f5196776fe2657a9bebe0a727cf8fe8e5","modified":1638679602829},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"e1550114d6f5e828d791831153ef0912a14b4d49","modified":1638679602829},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1638679602829},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1638679602829},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"be5c46b983df08b9dbac1b4749b1a101b54b6b50","modified":1638679602829},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"6eee86c8f0175d6c09e434053516cd8556f78d44","modified":1638679602829},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"c435cfd858bf82726fff2c85d384e2207bea0370","modified":1638679602829},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d314bbe10a7aed68c364c5bd26057f0d0825a7e8","modified":1638679602830},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"78f0b6edc296a9ed5144da9f9752c0b96bebfaa5","modified":1638679602830},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1638679602830},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1638679602815},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1638679602815},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1638679602815},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"19fc5ca0784f5d2befddb9d8bc463b916c5c2518","modified":1638679602815},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1638679602815},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"5d61dedb3bec1021d52894f9b379e4d0953f6a35","modified":1638679602815},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8998a07acf0dbd10811835c8dfc91d92e680bcae","modified":1638679602816},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"76d0dfb3a8b873a6180604ac6daecf38b6a963a2","modified":1638679602816},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"8a2e724df3d5cd14765eb951f0a9e1dba399fd35","modified":1638679602816},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1638679602816},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"d6ecc5dfd15c588782ba5e1df9f915b305622aef","modified":1638679602816},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cf6540e12c2de5befcfb7e92d915e3b75fd53dfa","modified":1638679602816},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"27001ad06f69ff035639210ab2f614861b21a4f4","modified":1638679602817},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1638679602817},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"b3fa752f72ca1413289b76c56fbd33a00e3d25d7","modified":1638679602817},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"48ee817d05ddc788423d7f10e9823e23fda81d04","modified":1638679602818},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1638679602817},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"2c534d2b2dbc932ad65d335a720a7ba9612bac04","modified":1638679602818},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"2896840ab8ac8ab2a7f76d18df893f290ac31625","modified":1638679602818},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"5d8fc91cdb7ee313eb367dcec7d5b2429f98242f","modified":1638679602818},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"8cb89864e8245a356d08ef0fee3133810f646fea","modified":1638679602819},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"254e781e7b25e31a1a589c8b38dc608802f1cc6e","modified":1638679602819},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"f1778d2c56974b96dae429456d5c55be325c4946","modified":1638679602819},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"6d8afd8e23c40bb2b2a2edbe4eb0d2671cd81188","modified":1638679602820},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"a83a1236564b81eab9a23dba9a634a6de90d4726","modified":1638679602820},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"9c8abc55c9d94d384a245013951aba5ecca2f4fe","modified":1638679602820},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1638679602821},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1638679602821},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"66782e68f1c74a7d0aecef20e2ca16bbe6b52592","modified":1638679602821},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1638679602822},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"521b36ea7bb3a843029cbfbb6b5e76e91c40a19f","modified":1638679602822},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"55060cade4547779ba5996643d93763373b5127c","modified":1638679602822},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"469855a72d2c2b63a21df8fbcb8cc41d32cb9bde","modified":1638679602822},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"432e73bc4f99322af6af1852e0ea6e674919c31a","modified":1638679602822},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"43f7d37948232553873ee346d625457bfe704e74","modified":1638679602822},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"a1936845d423c39adb0df4389e9b69b27cdc79cd","modified":1638679602823},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"f11dca93e334b68a29e792f7abe682993fab7568","modified":1638679602819},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"83ee4993710fc8daa1c8dbfccd5d5091fd244c30","modified":1638679602824},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"920f21dc03b28f006aef7e9d0fd444c2cd283efc","modified":1638679602824},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"15a5e273a8137550c93c8d2a60f9fcf86e04a89e","modified":1638679602825},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1638679602825},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"f09bc97e3681d73c38d7d3c5c271486c2c6537e2","modified":1638679602825},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"acfdec45e56cdd6a5ea61e0154f8a6d1bc068214","modified":1638679602825},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"3c029a003e9bf747e1b9cc7c0c127f6028374876","modified":1638679602826},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"29bef220307d86b1eafbb3714381df32d48b5a60","modified":1638679602826},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1638679602826},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"dcf426c2a4836386c0c27235de3f9a95c5de67cc","modified":1638679602826},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"cef4e779473daa3761709958243c6b8a57bbd814","modified":1638679602826},{"_id":"themes/next/source/images/alipay.png","hash":"8f42b226038e464ed1d8b4a1e588d645af5d845b","modified":1638679602831},{"_id":"public/search.xml","hash":"d6a17d128e2e9f9c5805ee4da812b08fb3f738ea","modified":1644764297031},{"_id":"public/about/index.html","hash":"99ed48e30b5f49657af2d0ae45b41a092afcd67f","modified":1644764297031},{"_id":"public/categories/index.html","hash":"d1ea4b5f32f9f16a6db666d271635e3ccfcd28e3","modified":1644764297031},{"_id":"public/tags/index.html","hash":"b71a31640f7d5c97909c448a1cdffff468461e48","modified":1644764297031},{"_id":"public/archives/index.html","hash":"a26ef12125a682080624d109240deb9e3be90ba4","modified":1644764297031},{"_id":"public/archives/2020/index.html","hash":"829f263906b64aefcb58a55386115de64bea91cf","modified":1644764297031},{"_id":"public/archives/2020/09/index.html","hash":"0173eaba20b36bd8a575e73eccdd050a47583839","modified":1644764297031},{"_id":"public/archives/2020/10/index.html","hash":"63c6ffb35f38ea6b94483fd074403923f2ba4c6f","modified":1644764297031},{"_id":"public/categories/hexo/index.html","hash":"712532f81156ba65e3f15e2e1f89a7598a889f26","modified":1644764297031},{"_id":"public/categories/javascript/index.html","hash":"4fa8564c41ea2d49a9c20a3e205435d1e548a98a","modified":1644764297031},{"_id":"public/tags/hexo/index.html","hash":"f22f50ece7c14f4cf889491fa3d619ebe22d4036","modified":1644764297031},{"_id":"public/tags/javascript/index.html","hash":"2056464436366f10c75e7930441d6444b6efa48f","modified":1644764297031},{"_id":"public/posts/89aff4dd/index.html","hash":"32cfef685f8f1173792b7897a62263ff40b3e544","modified":1644764297031},{"_id":"public/posts/896459f8/index.html","hash":"6e17184624b24b43a4d8793de5c9b44315746a7b","modified":1644764297031},{"_id":"public/index.html","hash":"d2e345874e16db13b8c365c5c6607915994b1156","modified":1644764297031},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1644764297031},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1644764297031},{"_id":"public/images/avatar.png","hash":"54b4ef400a561bc281ff76a38a0265330fc8ec3b","modified":1644764297031},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1644764297031},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1644764297031},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1644764297031},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1644764297031},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1644764297031},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1644764297031},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1644764297031},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1644764297031},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1644764297031},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1644764297031},{"_id":"public/images/alipay.png","hash":"8f42b226038e464ed1d8b4a1e588d645af5d845b","modified":1644764297031},{"_id":"public/js/algolia-search.js","hash":"a6f78c4cfffa976e4b8043e3486ce99aaba02bda","modified":1644764297031},{"_id":"public/js/bookmark.js","hash":"e45e1fbb7c6d645e9c410759486216e570d02bef","modified":1644764297031},{"_id":"public/js/local-search.js","hash":"0a66cec43424ce8f8eb182b583e92ee15a61dcc7","modified":1644764297031},{"_id":"public/js/next-boot.js","hash":"da67f3eed604dcdc4e89280c9db69fe1f62818e9","modified":1644764297031},{"_id":"public/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1644764297031},{"_id":"public/js/schedule.js","hash":"ababd67895ce49049271601c6928fce56a1c6bbb","modified":1644764297031},{"_id":"public/js/utils.js","hash":"eed4ec020dbf499b6479cbe4e1a90b0b4fe4d1e8","modified":1644764297031},{"_id":"public/js/schemes/muse.js","hash":"d7a6c12bb534810eb748d0ba28aff67cccf0bb3f","modified":1644764297031},{"_id":"public/css/main.css","hash":"cd1fce193d2f9eb15a3753c70ac3a557a7c2d3fb","modified":1644764297031}],"Category":[{"name":"hexo","_id":"ckzle725j0004e3e29yxdde1z"},{"name":"javascript","_id":"ckzle725m0007e3e282cqfnlt"}],"Data":[{"_id":"footer","data":"<div class=\"footer-custom\">\nTheme source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLXRoZW1lLW5leHQ=\">here</span><br>\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n"},{"_id":"languages","data":{"en":{"name":"English","subtitle":"To see the differences.","author":"Harvey Chen","description":"FrontEnd/BackEnd/DevOps"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Services":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}}},{"_id":"sidebar","data":"<div class=\"cc-license animated\" itemprop=\"sponsor\">\n  <span class=\"exturl cc-opacity\" title=\"Deploy with Netlify → https://www.netlify.com\" data-url=\"aHR0cHM6Ly93d3cubmV0bGlmeS5jb20=\"><img width=\"80\" src=\"https://www.netlify.com/img/global/badges/netlify-dark.svg\" alt=\"Netlify\"></span>\n</div>\n"},{"_id":"styles","data":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n"},{"_id":"variables","data":""}],"Page":[{"title":"About me","date":"2014-12-22T04:39:04.000Z","type":"about","_content":"\n![](/images/avatar.png)\n<center> 坐澳观天的程序猿~ </center>","source":"about/index.md","raw":"---\ntitle: About me\ndate: 2014-12-22 12:39:04\ntype: \"about\"\n---\n\n![](/images/avatar.png)\n<center> 坐澳观天的程序猿~ </center>","updated":"2021-12-05T04:46:42.773Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckzle725c0000e3e27cnv3rdf","content":"<p><img src=\"/images/avatar.png\"></p>\n<center> 坐澳观天的程序猿~ </center>","site":{"data":{"footer":"<div class=\"footer-custom\">\nTheme source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLXRoZW1lLW5leHQ=\">here</span><br>\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","languages":{"en":{"name":"English","subtitle":"To see the differences.","author":"Harvey Chen","description":"FrontEnd/BackEnd/DevOps"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Services":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"sidebar":"<div class=\"cc-license animated\" itemprop=\"sponsor\">\n  <span class=\"exturl cc-opacity\" title=\"Deploy with Netlify → https://www.netlify.com\" data-url=\"aHR0cHM6Ly93d3cubmV0bGlmeS5jb20=\"><img width=\"80\" src=\"https://www.netlify.com/img/global/badges/netlify-dark.svg\" alt=\"Netlify\"></span>\n</div>\n","styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n","variables":""}},"length":9,"excerpt":"","more":"<p><img src=\"/images/avatar.png\"></p>\n<center> 坐澳观天的程序猿~ </center>"},{"title":"All categories","date":"2014-12-22T04:39:04.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: All categories\ndate: 2014-12-22 12:39:04\ntype: \"categories\"\n---\n","updated":"2021-12-05T04:46:42.773Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckzle725h0002e3e210dhh2w3","content":"","site":{"data":{"footer":"<div class=\"footer-custom\">\nTheme source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLXRoZW1lLW5leHQ=\">here</span><br>\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","languages":{"en":{"name":"English","subtitle":"To see the differences.","author":"Harvey Chen","description":"FrontEnd/BackEnd/DevOps"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Services":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"sidebar":"<div class=\"cc-license animated\" itemprop=\"sponsor\">\n  <span class=\"exturl cc-opacity\" title=\"Deploy with Netlify → https://www.netlify.com\" data-url=\"aHR0cHM6Ly93d3cubmV0bGlmeS5jb20=\"><img width=\"80\" src=\"https://www.netlify.com/img/global/badges/netlify-dark.svg\" alt=\"Netlify\"></span>\n</div>\n","styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n","variables":""}},"length":0,"excerpt":"","more":""},{"title":"All tags","date":"2014-12-22T04:39:04.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: All tags\ndate: 2014-12-22 12:39:04\ntype: \"tags\"\n---\n","updated":"2021-12-05T04:46:42.773Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckzle725l0006e3e2eifubumb","content":"","site":{"data":{"footer":"<div class=\"footer-custom\">\nTheme source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLXRoZW1lLW5leHQ=\">here</span><br>\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","languages":{"en":{"name":"English","subtitle":"To see the differences.","author":"Harvey Chen","description":"FrontEnd/BackEnd/DevOps"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Services":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"sidebar":"<div class=\"cc-license animated\" itemprop=\"sponsor\">\n  <span class=\"exturl cc-opacity\" title=\"Deploy with Netlify → https://www.netlify.com\" data-url=\"aHR0cHM6Ly93d3cubmV0bGlmeS5jb20=\"><img width=\"80\" src=\"https://www.netlify.com/img/global/badges/netlify-dark.svg\" alt=\"Netlify\"></span>\n</div>\n","styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n","variables":""}},"length":0,"excerpt":"","more":""}],"Post":[{"title":"Hexo + Next踩坑","abbrlink":"896459f8","date":"2020-09-10T05:03:37.000Z","_content":"\n前前后后搞了快有一个星期的时间 终于把这个博客给搭起来了...\n\n用的是hexo + Git pages + Next theme 现在回过头来看其实这些都并不是很难 \n\n真正麻烦的地方就在于next的theme的一些配置都已经更新了(主要是他们人多力量大)\n\n但是很多教程并没有随着更新 尤其是各种插件这一块 所以还是踩了不少的坑\n\n<!-- more -->\n\n​    \n\n### Next theme 的config文件配置\n\n#### **用Alternate Theme Config**\n\n因为next他们这个theme的更新速度是很快的 如果直接从repo上面拉代码下来很容易产生conflict\n\n所以所有theme的主题配置推荐使用Alternate Theme Config\n\n主要的逻辑就是用根目录下的\n\n``` bash\n_config.next.yml\n```\n\n代替原本的theme里面的config文件 具体参照下面的官方博客链接\n\n[使用Alternate Theme Config](https://theme-next.js.org/docs/getting-started/configuration.html)\n\n  \n\n#### **配置暗黑风格的scheme**\n\n最新的next theme支持了暗黑风格主题 这个很赞\n\n我的博客用了 Gemini  + Dark 看上应该是舒服多了\n\n[Dark scheme config](https://theme-next.js.org/docs/theme-settings/index.html?highlight=scheme)\n\n​    \n\n### Next theme 的插件优化\n\n#### **使用不蒜子显示访客人数**\n\nnext theme的最新版已经在配置中集成了显示访客人数的功能\n\n不需要你再费劲的去改.njk文件了 \n\n但是网上能找的教程 目前很多还都是让你去改动layout里面的footer.ejs \n\n这实在是画蛇添足的举动 具体可以直接看下面官方博客的链接\n\n[使用不蒜子](https://theme-next.js.org/docs/third-party-services/statistics-and-analytics.html?highlight=busuanz)\n\n  \n\n#### **使用Gitalk的评论系统**\n\nNext theme内置支持很多评论系统 然而我试了一下其中很多跟暗黑主题风格不搭配\n\n另外说一句 虽然它官方博客上也写了支持国内的几个评论系统\n\n但是我研究了一下发现都需要实名注册 实在是感觉不怎么安全 说不定以后就会给你因为各种理由停掉...\n\n所以最后还是选用了Gitalk这一套 虽然说管理的体验一般 但是好看呀！\n\n[使用Gitalk](https://theme-next.js.org/docs/third-party-services/comments.html)\n\n​    \n\n### 本地预览与上传更新\n\n这里我写了一个.sh文件集成了几个简单的hexo命令 \n\n在root目录下床架deploy.sh\n\n``` bash\nyourname.github.io/deploy.sh\n```\n``` bash\necho -e \"清除旧文件\"\nhexo clean\necho -e \"\\t\\t......OK\\n正在【生成】静态页面\"\nhexo g\nif [ $1 == 'p' ]\nthen\n    echo -e \"\\t\\t......OK\\n正在【预览】静态页面\"\n    hexo s\n    echo \"预览完成\"\nfi\nif [ $1 == 'g' ]\nthen\n    echo -e \"\\t\\t......OK\\n正在【发布】静态页面\"\n    hexo d\n    echo \"发布完成\"\nfi\n```\n\n这样只要在run命令的时候输入不同的参数就可以完成本地预览或者部署到git\n\n```bash\n$./deploy.sh [Location]\nLocation Options:\n --p local preview\n --g deploy to the GitHub  \n```\n\n​    \n\n**更多配置文件和插件请参考官方博客** [Next Them Official](https://theme-next.js.org/)\n\n","source":"_posts/Hexo + next踩坑.md","raw":"---\ntitle: Hexo + Next踩坑\ntags:\n  - hexo\ncategories:\n  - hexo\nabbrlink: 896459f8\ndate: 2020-09-10 13:03:37\n---\n\n前前后后搞了快有一个星期的时间 终于把这个博客给搭起来了...\n\n用的是hexo + Git pages + Next theme 现在回过头来看其实这些都并不是很难 \n\n真正麻烦的地方就在于next的theme的一些配置都已经更新了(主要是他们人多力量大)\n\n但是很多教程并没有随着更新 尤其是各种插件这一块 所以还是踩了不少的坑\n\n<!-- more -->\n\n​    \n\n### Next theme 的config文件配置\n\n#### **用Alternate Theme Config**\n\n因为next他们这个theme的更新速度是很快的 如果直接从repo上面拉代码下来很容易产生conflict\n\n所以所有theme的主题配置推荐使用Alternate Theme Config\n\n主要的逻辑就是用根目录下的\n\n``` bash\n_config.next.yml\n```\n\n代替原本的theme里面的config文件 具体参照下面的官方博客链接\n\n[使用Alternate Theme Config](https://theme-next.js.org/docs/getting-started/configuration.html)\n\n  \n\n#### **配置暗黑风格的scheme**\n\n最新的next theme支持了暗黑风格主题 这个很赞\n\n我的博客用了 Gemini  + Dark 看上应该是舒服多了\n\n[Dark scheme config](https://theme-next.js.org/docs/theme-settings/index.html?highlight=scheme)\n\n​    \n\n### Next theme 的插件优化\n\n#### **使用不蒜子显示访客人数**\n\nnext theme的最新版已经在配置中集成了显示访客人数的功能\n\n不需要你再费劲的去改.njk文件了 \n\n但是网上能找的教程 目前很多还都是让你去改动layout里面的footer.ejs \n\n这实在是画蛇添足的举动 具体可以直接看下面官方博客的链接\n\n[使用不蒜子](https://theme-next.js.org/docs/third-party-services/statistics-and-analytics.html?highlight=busuanz)\n\n  \n\n#### **使用Gitalk的评论系统**\n\nNext theme内置支持很多评论系统 然而我试了一下其中很多跟暗黑主题风格不搭配\n\n另外说一句 虽然它官方博客上也写了支持国内的几个评论系统\n\n但是我研究了一下发现都需要实名注册 实在是感觉不怎么安全 说不定以后就会给你因为各种理由停掉...\n\n所以最后还是选用了Gitalk这一套 虽然说管理的体验一般 但是好看呀！\n\n[使用Gitalk](https://theme-next.js.org/docs/third-party-services/comments.html)\n\n​    \n\n### 本地预览与上传更新\n\n这里我写了一个.sh文件集成了几个简单的hexo命令 \n\n在root目录下床架deploy.sh\n\n``` bash\nyourname.github.io/deploy.sh\n```\n``` bash\necho -e \"清除旧文件\"\nhexo clean\necho -e \"\\t\\t......OK\\n正在【生成】静态页面\"\nhexo g\nif [ $1 == 'p' ]\nthen\n    echo -e \"\\t\\t......OK\\n正在【预览】静态页面\"\n    hexo s\n    echo \"预览完成\"\nfi\nif [ $1 == 'g' ]\nthen\n    echo -e \"\\t\\t......OK\\n正在【发布】静态页面\"\n    hexo d\n    echo \"发布完成\"\nfi\n```\n\n这样只要在run命令的时候输入不同的参数就可以完成本地预览或者部署到git\n\n```bash\n$./deploy.sh [Location]\nLocation Options:\n --p local preview\n --g deploy to the GitHub  \n```\n\n​    \n\n**更多配置文件和插件请参考官方博客** [Next Them Official](https://theme-next.js.org/)\n\n","slug":"Hexo + next踩坑","published":1,"updated":"2021-12-05T04:46:42.773Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzle725f0001e3e27whsedr6","content":"<p>前前后后搞了快有一个星期的时间 终于把这个博客给搭起来了…</p>\n<p>用的是hexo + Git pages + Next theme 现在回过头来看其实这些都并不是很难 </p>\n<p>真正麻烦的地方就在于next的theme的一些配置都已经更新了(主要是他们人多力量大)</p>\n<p>但是很多教程并没有随着更新 尤其是各种插件这一块 所以还是踩了不少的坑</p>\n<a id=\"more\"></a>\n\n<p>​    </p>\n<h3 id=\"Next-theme-的config文件配置\"><a href=\"#Next-theme-的config文件配置\" class=\"headerlink\" title=\"Next theme 的config文件配置\"></a>Next theme 的config文件配置</h3><h4 id=\"用Alternate-Theme-Config\"><a href=\"#用Alternate-Theme-Config\" class=\"headerlink\" title=\"用Alternate Theme Config\"></a><strong>用Alternate Theme Config</strong></h4><p>因为next他们这个theme的更新速度是很快的 如果直接从repo上面拉代码下来很容易产生conflict</p>\n<p>所以所有theme的主题配置推荐使用Alternate Theme Config</p>\n<p>主要的逻辑就是用根目录下的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_config.next.yml</span><br></pre></td></tr></table></figure>\n\n<p>代替原本的theme里面的config文件 具体参照下面的官方博客链接</p>\n<p><a href=\"https://theme-next.js.org/docs/getting-started/configuration.html\">使用Alternate Theme Config</a></p>\n<h4 id=\"配置暗黑风格的scheme\"><a href=\"#配置暗黑风格的scheme\" class=\"headerlink\" title=\"配置暗黑风格的scheme\"></a><strong>配置暗黑风格的scheme</strong></h4><p>最新的next theme支持了暗黑风格主题 这个很赞</p>\n<p>我的博客用了 Gemini  + Dark 看上应该是舒服多了</p>\n<p><a href=\"https://theme-next.js.org/docs/theme-settings/index.html?highlight=scheme\">Dark scheme config</a></p>\n<p>​    </p>\n<h3 id=\"Next-theme-的插件优化\"><a href=\"#Next-theme-的插件优化\" class=\"headerlink\" title=\"Next theme 的插件优化\"></a>Next theme 的插件优化</h3><h4 id=\"使用不蒜子显示访客人数\"><a href=\"#使用不蒜子显示访客人数\" class=\"headerlink\" title=\"使用不蒜子显示访客人数\"></a><strong>使用不蒜子显示访客人数</strong></h4><p>next theme的最新版已经在配置中集成了显示访客人数的功能</p>\n<p>不需要你再费劲的去改.njk文件了 </p>\n<p>但是网上能找的教程 目前很多还都是让你去改动layout里面的footer.ejs </p>\n<p>这实在是画蛇添足的举动 具体可以直接看下面官方博客的链接</p>\n<p><a href=\"https://theme-next.js.org/docs/third-party-services/statistics-and-analytics.html?highlight=busuanz\">使用不蒜子</a></p>\n<h4 id=\"使用Gitalk的评论系统\"><a href=\"#使用Gitalk的评论系统\" class=\"headerlink\" title=\"使用Gitalk的评论系统\"></a><strong>使用Gitalk的评论系统</strong></h4><p>Next theme内置支持很多评论系统 然而我试了一下其中很多跟暗黑主题风格不搭配</p>\n<p>另外说一句 虽然它官方博客上也写了支持国内的几个评论系统</p>\n<p>但是我研究了一下发现都需要实名注册 实在是感觉不怎么安全 说不定以后就会给你因为各种理由停掉…</p>\n<p>所以最后还是选用了Gitalk这一套 虽然说管理的体验一般 但是好看呀！</p>\n<p><a href=\"https://theme-next.js.org/docs/third-party-services/comments.html\">使用Gitalk</a></p>\n<p>​    </p>\n<h3 id=\"本地预览与上传更新\"><a href=\"#本地预览与上传更新\" class=\"headerlink\" title=\"本地预览与上传更新\"></a>本地预览与上传更新</h3><p>这里我写了一个.sh文件集成了几个简单的hexo命令 </p>\n<p>在root目录下床架deploy.sh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yourname.github.io/deploy.sh</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;清除旧文件&quot;</span></span><br><span class=\"line\">hexo clean</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\t\\t......OK\\n正在【生成】静态页面&quot;</span></span><br><span class=\"line\">hexo g</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$1</span> == <span class=\"string\">&#x27;p&#x27;</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\t\\t......OK\\n正在【预览】静态页面&quot;</span></span><br><span class=\"line\">    hexo s</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;预览完成&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$1</span> == <span class=\"string\">&#x27;g&#x27;</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\t\\t......OK\\n正在【发布】静态页面&quot;</span></span><br><span class=\"line\">    hexo d</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;发布完成&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n\n<p>这样只要在run命令的时候输入不同的参数就可以完成本地预览或者部署到git</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$./deploy.sh [Location]</span><br><span class=\"line\">Location Options:</span><br><span class=\"line\"> --p <span class=\"built_in\">local</span> preview</span><br><span class=\"line\"> --g deploy to the GitHub  </span><br></pre></td></tr></table></figure>\n\n<p>​    </p>\n<p><strong>更多配置文件和插件请参考官方博客</strong> <a href=\"https://theme-next.js.org/\">Next Them Official</a></p>\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nTheme source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLXRoZW1lLW5leHQ=\">here</span><br>\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","languages":{"en":{"name":"English","subtitle":"To see the differences.","author":"Harvey Chen","description":"FrontEnd/BackEnd/DevOps"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Services":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"sidebar":"<div class=\"cc-license animated\" itemprop=\"sponsor\">\n  <span class=\"exturl cc-opacity\" title=\"Deploy with Netlify → https://www.netlify.com\" data-url=\"aHR0cHM6Ly93d3cubmV0bGlmeS5jb20=\"><img width=\"80\" src=\"https://www.netlify.com/img/global/badges/netlify-dark.svg\" alt=\"Netlify\"></span>\n</div>\n","styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n","variables":""}},"length":1280,"excerpt":"<p>前前后后搞了快有一个星期的时间 终于把这个博客给搭起来了…</p>\n<p>用的是hexo + Git pages + Next theme 现在回过头来看其实这些都并不是很难 </p>\n<p>真正麻烦的地方就在于next的theme的一些配置都已经更新了(主要是他们人多力量大)</p>\n<p>但是很多教程并没有随着更新 尤其是各种插件这一块 所以还是踩了不少的坑</p>","more":"<p>​    </p>\n<h3 id=\"Next-theme-的config文件配置\"><a href=\"#Next-theme-的config文件配置\" class=\"headerlink\" title=\"Next theme 的config文件配置\"></a>Next theme 的config文件配置</h3><h4 id=\"用Alternate-Theme-Config\"><a href=\"#用Alternate-Theme-Config\" class=\"headerlink\" title=\"用Alternate Theme Config\"></a><strong>用Alternate Theme Config</strong></h4><p>因为next他们这个theme的更新速度是很快的 如果直接从repo上面拉代码下来很容易产生conflict</p>\n<p>所以所有theme的主题配置推荐使用Alternate Theme Config</p>\n<p>主要的逻辑就是用根目录下的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_config.next.yml</span><br></pre></td></tr></table></figure>\n\n<p>代替原本的theme里面的config文件 具体参照下面的官方博客链接</p>\n<p><a href=\"https://theme-next.js.org/docs/getting-started/configuration.html\">使用Alternate Theme Config</a></p>\n<h4 id=\"配置暗黑风格的scheme\"><a href=\"#配置暗黑风格的scheme\" class=\"headerlink\" title=\"配置暗黑风格的scheme\"></a><strong>配置暗黑风格的scheme</strong></h4><p>最新的next theme支持了暗黑风格主题 这个很赞</p>\n<p>我的博客用了 Gemini  + Dark 看上应该是舒服多了</p>\n<p><a href=\"https://theme-next.js.org/docs/theme-settings/index.html?highlight=scheme\">Dark scheme config</a></p>\n<p>​    </p>\n<h3 id=\"Next-theme-的插件优化\"><a href=\"#Next-theme-的插件优化\" class=\"headerlink\" title=\"Next theme 的插件优化\"></a>Next theme 的插件优化</h3><h4 id=\"使用不蒜子显示访客人数\"><a href=\"#使用不蒜子显示访客人数\" class=\"headerlink\" title=\"使用不蒜子显示访客人数\"></a><strong>使用不蒜子显示访客人数</strong></h4><p>next theme的最新版已经在配置中集成了显示访客人数的功能</p>\n<p>不需要你再费劲的去改.njk文件了 </p>\n<p>但是网上能找的教程 目前很多还都是让你去改动layout里面的footer.ejs </p>\n<p>这实在是画蛇添足的举动 具体可以直接看下面官方博客的链接</p>\n<p><a href=\"https://theme-next.js.org/docs/third-party-services/statistics-and-analytics.html?highlight=busuanz\">使用不蒜子</a></p>\n<h4 id=\"使用Gitalk的评论系统\"><a href=\"#使用Gitalk的评论系统\" class=\"headerlink\" title=\"使用Gitalk的评论系统\"></a><strong>使用Gitalk的评论系统</strong></h4><p>Next theme内置支持很多评论系统 然而我试了一下其中很多跟暗黑主题风格不搭配</p>\n<p>另外说一句 虽然它官方博客上也写了支持国内的几个评论系统</p>\n<p>但是我研究了一下发现都需要实名注册 实在是感觉不怎么安全 说不定以后就会给你因为各种理由停掉…</p>\n<p>所以最后还是选用了Gitalk这一套 虽然说管理的体验一般 但是好看呀！</p>\n<p><a href=\"https://theme-next.js.org/docs/third-party-services/comments.html\">使用Gitalk</a></p>\n<p>​    </p>\n<h3 id=\"本地预览与上传更新\"><a href=\"#本地预览与上传更新\" class=\"headerlink\" title=\"本地预览与上传更新\"></a>本地预览与上传更新</h3><p>这里我写了一个.sh文件集成了几个简单的hexo命令 </p>\n<p>在root目录下床架deploy.sh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yourname.github.io/deploy.sh</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;清除旧文件&quot;</span></span><br><span class=\"line\">hexo clean</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\t\\t......OK\\n正在【生成】静态页面&quot;</span></span><br><span class=\"line\">hexo g</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$1</span> == <span class=\"string\">&#x27;p&#x27;</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\t\\t......OK\\n正在【预览】静态页面&quot;</span></span><br><span class=\"line\">    hexo s</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;预览完成&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$1</span> == <span class=\"string\">&#x27;g&#x27;</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\t\\t......OK\\n正在【发布】静态页面&quot;</span></span><br><span class=\"line\">    hexo d</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;发布完成&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n\n<p>这样只要在run命令的时候输入不同的参数就可以完成本地预览或者部署到git</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$./deploy.sh [Location]</span><br><span class=\"line\">Location Options:</span><br><span class=\"line\"> --p <span class=\"built_in\">local</span> preview</span><br><span class=\"line\"> --g deploy to the GitHub  </span><br></pre></td></tr></table></figure>\n\n<p>​    </p>\n<p><strong>更多配置文件和插件请参考官方博客</strong> <a href=\"https://theme-next.js.org/\">Next Them Official</a></p>"},{"title":"JavaScript深入理解","comments":1,"abbrlink":"89aff4dd","date":"2020-10-04T09:17:23.000Z","_content":"\n## 函数式编程\n\n### 柯里化(Currying)\n\n柯里化是函数式编程的基础 主要的想法在于利用函数式编程的概念\n\n利用闭包的特性把原本是接受多个参数的函数封装成只接受一个参数的函数(单函数参数)\n\n后面再配合组合的方式使用compose函数 \n\n```js\nfunction curry(fn){  //这里用递归实现 考虑递归条件与递归出口\n  return function makeFn(...args) {\n    if (args.length < fn.length) { //递归条件 - 当传入的参数的个数小于fn本身执行需要的参数的个数\n      //高阶函数这里要return function\n      return function (...localArgs) { \n        return makeFn(...[...args, ...localArgs]); //把上一层递归的args和本身收到的参数拼起来往下递归\n      };\n    }\n  \treturn fn(...arguments); //递归出口 - 当传入的参数的个数等于执行函数所需要的参数的个数时 执行函数\n  };\n}\n```\n\n<!-- more -->\n\n### 组合函数(Compose-lodash)\n\n把一组函数组合成数据管道 按照从右到左的次序依次执行\n\n所有被组合的函数都必须是单函数参数(多数是柯里化以后的函数)\n\n```js\nfunction compose (...args) {\n  return function (value) {\n    return args.reverse().reduce(function (acc, fn) {\n      return fn(acc)\n    }, value)\n  }\n}\n\nconst reverse = (arr) => arr.reverse()\nconst first  = (arr) => arr[0]\nconst toUpperCase = (str) => str.toUpperCase()\n\nconst f = compose(toUpperCase, first, reverse)\nconsole.log(f(['ant', 'bat', 'cab'])) // C B A\n```\n\n\n\n### Point-Free\n\n在函数组合的基础上继续提升 从data-first 变成method-first \n\n用这样的方法来构造函数组合 构造时并不涉及数据 而执行时再把需要用到的数据传进去\n\n按照一定的步骤把小的函数给组合起来 实现特定的目的\n\n  \n\n这里可以用loadsh里面的fp模块实现\n\n```js\nconst firstLetterToUpper = fp.flowRight(\n  fp.join('. '),\n  fp.map(fp.flowRight(fp.toUpper, fp.first())),\n  fp.split(''),\n)\n\nconsole.log(firstLetterToUpper('world wild web')) //W. W. W\n```\n\n\n\n### 函子(Functor)\n\n#### 基本概念\n\n首先要明确一下这个概念的由来 \n\n在传统的函数式编程中 所有的函数均应该为纯函数 也就是说这些函数本身都是没有副作用的函数\n\n> 副作用：函数执行时不引起其他变量的变化，函数没有中间中间状态\n\n然而在实际应用中 除了功能单一的一些工具类的函数 大部分的函数都是为了业务构造的\n\n他们是不可能做到完全避免副作用的 所以函子的概念就诞生了\n\n  \n\n函子把要被改变的变量和要改变这个变量的方法封装到听一个class中 \n\n在使用的时候从外部传入一个函数来执行想做的操作 同时这个操作也会返回一个新的函子 \n\n这样可以做到链式操作 **函子之中包裹的这个值是永远不会被直接取出来操作的**\n\n\n\n```js\n//简单的函子的演示\nclass Container {\n  //使用静态函数封装构造函数，这样外面调用的时候就不需要使用new\n  static of (value) {\n    return new Container(value)\n  }\n\n  constructor (value) {\n    this._value = value\n  }\n\n  map (fn) {\n    return Container.of(fn(this._value))\n  }\n}\n\n//test\nconst r = Container.of(5) //用5来初始化这个函子\n\t\t\t\t\t\t.map((x) => x + 1) //值加一\n\t\t\t\t\t\t.map((x) => x * x) //36\n```\n\n\n\n#### Maybe函子\n\n函子可以按照其功能或用法的特点归类成不同的函子   \n\n比如基本的函子里面是没有判断传入的value值是不是为空或者null的 \n\n所以可以在容器中加入判断 在value为空时不做任何处理 这样直接返回新函子\n\n\n\n```js\n// MayBe 函子\nclass MayBe {\n  static of (value) {\n    return new MayBe(value)\n  }\n\n  constructor (value) {\n    this._value = value\n  }\n\n  map (fn) {\n    return this.isNothing() ? MayBe.of(null) : MayBe.of(fn(this._value))\n  }\n\n  isNothing () {\n    return this._value === null || this._value === undefined\n  }\n}\n\nconst r = MayBe.of('Hello World')\n\t\t\t\t\t.map(x => x.toUpperCase())\nconsole.log(r) //HELLO WORLD\n\n\nconst r = MayBe.of(null)\n\t\t\t\t  .map(x => x.toUpperCase())\nconsole.log(r) //null\n```\n\n\n\n#### 其他函子与常用库\n\nEither函子， IO函子， Task函子等等其他函子 \n\n具体写可以使用[FolkTale](https://folktale.origamitower.com/)\n\n\n\n## 函数式编程的面试题\n\n```js\nconst arrat = ['23', '8', '10']\n//用fp进行解答 会得到错误结果\nconsole.log(array.map(parseInt)) //[23, NaN, 2]\n```\n\n这里的错误是因为map函数本身的定义是这样的\n\n```js\nvar new_array = arr.map(function callback(currentValue[, index[, array]]) {\n // Return element for new_array \n}[, thisArg])\n```\n\n详细解释\n\n> callback\n\n生成新数组元素的函数，使用三个参数：\n\n- `currentValue`\n\n  `callback` 数组中正在处理的当前元素\n\n- `index`可选\n\n  `callback` 数组中正在处理的当前元素的索引\n\n- `array`可选\n\n  `map` 方法调用的数组。\n\n    \n\n而parseInt的定义是这样的\n\n> parseInt(string, radix);\n\n- `string`\n\n  要被解析的值。如果参数不是一个字符串，则将其转换为字符串(使用  `ToString `抽象操作)。字符串开头的空白符将会被忽略\n\n- `radix` 可选\n\n  从 `2` 到 `36`，表示字符串的基数。例如指定 16 表示被解析值是十六进制数。请注意，10不是默认值\n\n    \n\n也就是说当我们在调用parseInt的时候我们是没有指定radix的 \n\n而当radix取值为0， undefined或者null时parseInt不会以10进制来解析\n\n所以实际上当执行上一步操作时 真正得到的结果是这样的\n\n```js\nparseInt('23', 0) // parseInt没有第三个参数，所以map传递进来第三个参数array可以被忽略\nparseInt('8', 1)\nparseInt('10', 2)\n\n//结果[23, NaN, 2]\n```\n\n  \n\n这个题可以用lodash中的map方法来做\n\n**注意** 这里如果只用lodash中的普通的map方法也是会出问题的\n\n```js\nconst _ = require('lodash')\n\n// The `lodash/map` iteratee receives three arguments:\n// (value, index|key, collection)\n_.map(['6', '8', '10'], parseInt);\n// ➜ [6, NaN, 2]\n\nconst fp = require('lodash/fp')\n\n// The `lodash/fp/map` iteratee is capped at one argument:\n// (value)\nfp.map(parseInt)(['6', '8', '10']);\n// ➜ [6, 8, 10]\n```\n\n\n\n","source":"_posts/JavaScript深入理解.md","raw":"---\ntitle: JavaScript深入理解\ncomments: true\ntags:\n  - javascript\ncategories:\n  - javascript\nabbrlink: 89aff4dd\ndate: 2020-10-04 17:17:23\n---\n\n## 函数式编程\n\n### 柯里化(Currying)\n\n柯里化是函数式编程的基础 主要的想法在于利用函数式编程的概念\n\n利用闭包的特性把原本是接受多个参数的函数封装成只接受一个参数的函数(单函数参数)\n\n后面再配合组合的方式使用compose函数 \n\n```js\nfunction curry(fn){  //这里用递归实现 考虑递归条件与递归出口\n  return function makeFn(...args) {\n    if (args.length < fn.length) { //递归条件 - 当传入的参数的个数小于fn本身执行需要的参数的个数\n      //高阶函数这里要return function\n      return function (...localArgs) { \n        return makeFn(...[...args, ...localArgs]); //把上一层递归的args和本身收到的参数拼起来往下递归\n      };\n    }\n  \treturn fn(...arguments); //递归出口 - 当传入的参数的个数等于执行函数所需要的参数的个数时 执行函数\n  };\n}\n```\n\n<!-- more -->\n\n### 组合函数(Compose-lodash)\n\n把一组函数组合成数据管道 按照从右到左的次序依次执行\n\n所有被组合的函数都必须是单函数参数(多数是柯里化以后的函数)\n\n```js\nfunction compose (...args) {\n  return function (value) {\n    return args.reverse().reduce(function (acc, fn) {\n      return fn(acc)\n    }, value)\n  }\n}\n\nconst reverse = (arr) => arr.reverse()\nconst first  = (arr) => arr[0]\nconst toUpperCase = (str) => str.toUpperCase()\n\nconst f = compose(toUpperCase, first, reverse)\nconsole.log(f(['ant', 'bat', 'cab'])) // C B A\n```\n\n\n\n### Point-Free\n\n在函数组合的基础上继续提升 从data-first 变成method-first \n\n用这样的方法来构造函数组合 构造时并不涉及数据 而执行时再把需要用到的数据传进去\n\n按照一定的步骤把小的函数给组合起来 实现特定的目的\n\n  \n\n这里可以用loadsh里面的fp模块实现\n\n```js\nconst firstLetterToUpper = fp.flowRight(\n  fp.join('. '),\n  fp.map(fp.flowRight(fp.toUpper, fp.first())),\n  fp.split(''),\n)\n\nconsole.log(firstLetterToUpper('world wild web')) //W. W. W\n```\n\n\n\n### 函子(Functor)\n\n#### 基本概念\n\n首先要明确一下这个概念的由来 \n\n在传统的函数式编程中 所有的函数均应该为纯函数 也就是说这些函数本身都是没有副作用的函数\n\n> 副作用：函数执行时不引起其他变量的变化，函数没有中间中间状态\n\n然而在实际应用中 除了功能单一的一些工具类的函数 大部分的函数都是为了业务构造的\n\n他们是不可能做到完全避免副作用的 所以函子的概念就诞生了\n\n  \n\n函子把要被改变的变量和要改变这个变量的方法封装到听一个class中 \n\n在使用的时候从外部传入一个函数来执行想做的操作 同时这个操作也会返回一个新的函子 \n\n这样可以做到链式操作 **函子之中包裹的这个值是永远不会被直接取出来操作的**\n\n\n\n```js\n//简单的函子的演示\nclass Container {\n  //使用静态函数封装构造函数，这样外面调用的时候就不需要使用new\n  static of (value) {\n    return new Container(value)\n  }\n\n  constructor (value) {\n    this._value = value\n  }\n\n  map (fn) {\n    return Container.of(fn(this._value))\n  }\n}\n\n//test\nconst r = Container.of(5) //用5来初始化这个函子\n\t\t\t\t\t\t.map((x) => x + 1) //值加一\n\t\t\t\t\t\t.map((x) => x * x) //36\n```\n\n\n\n#### Maybe函子\n\n函子可以按照其功能或用法的特点归类成不同的函子   \n\n比如基本的函子里面是没有判断传入的value值是不是为空或者null的 \n\n所以可以在容器中加入判断 在value为空时不做任何处理 这样直接返回新函子\n\n\n\n```js\n// MayBe 函子\nclass MayBe {\n  static of (value) {\n    return new MayBe(value)\n  }\n\n  constructor (value) {\n    this._value = value\n  }\n\n  map (fn) {\n    return this.isNothing() ? MayBe.of(null) : MayBe.of(fn(this._value))\n  }\n\n  isNothing () {\n    return this._value === null || this._value === undefined\n  }\n}\n\nconst r = MayBe.of('Hello World')\n\t\t\t\t\t.map(x => x.toUpperCase())\nconsole.log(r) //HELLO WORLD\n\n\nconst r = MayBe.of(null)\n\t\t\t\t  .map(x => x.toUpperCase())\nconsole.log(r) //null\n```\n\n\n\n#### 其他函子与常用库\n\nEither函子， IO函子， Task函子等等其他函子 \n\n具体写可以使用[FolkTale](https://folktale.origamitower.com/)\n\n\n\n## 函数式编程的面试题\n\n```js\nconst arrat = ['23', '8', '10']\n//用fp进行解答 会得到错误结果\nconsole.log(array.map(parseInt)) //[23, NaN, 2]\n```\n\n这里的错误是因为map函数本身的定义是这样的\n\n```js\nvar new_array = arr.map(function callback(currentValue[, index[, array]]) {\n // Return element for new_array \n}[, thisArg])\n```\n\n详细解释\n\n> callback\n\n生成新数组元素的函数，使用三个参数：\n\n- `currentValue`\n\n  `callback` 数组中正在处理的当前元素\n\n- `index`可选\n\n  `callback` 数组中正在处理的当前元素的索引\n\n- `array`可选\n\n  `map` 方法调用的数组。\n\n    \n\n而parseInt的定义是这样的\n\n> parseInt(string, radix);\n\n- `string`\n\n  要被解析的值。如果参数不是一个字符串，则将其转换为字符串(使用  `ToString `抽象操作)。字符串开头的空白符将会被忽略\n\n- `radix` 可选\n\n  从 `2` 到 `36`，表示字符串的基数。例如指定 16 表示被解析值是十六进制数。请注意，10不是默认值\n\n    \n\n也就是说当我们在调用parseInt的时候我们是没有指定radix的 \n\n而当radix取值为0， undefined或者null时parseInt不会以10进制来解析\n\n所以实际上当执行上一步操作时 真正得到的结果是这样的\n\n```js\nparseInt('23', 0) // parseInt没有第三个参数，所以map传递进来第三个参数array可以被忽略\nparseInt('8', 1)\nparseInt('10', 2)\n\n//结果[23, NaN, 2]\n```\n\n  \n\n这个题可以用lodash中的map方法来做\n\n**注意** 这里如果只用lodash中的普通的map方法也是会出问题的\n\n```js\nconst _ = require('lodash')\n\n// The `lodash/map` iteratee receives three arguments:\n// (value, index|key, collection)\n_.map(['6', '8', '10'], parseInt);\n// ➜ [6, NaN, 2]\n\nconst fp = require('lodash/fp')\n\n// The `lodash/fp/map` iteratee is capped at one argument:\n// (value)\nfp.map(parseInt)(['6', '8', '10']);\n// ➜ [6, 8, 10]\n```\n\n\n\n","slug":"JavaScript深入理解","published":1,"updated":"2021-12-05T04:46:42.773Z","layout":"post","photos":[],"link":"","_id":"ckzle725i0003e3e2fh73hsrt","content":"<h2 id=\"函数式编程\"><a href=\"#函数式编程\" class=\"headerlink\" title=\"函数式编程\"></a>函数式编程</h2><h3 id=\"柯里化-Currying\"><a href=\"#柯里化-Currying\" class=\"headerlink\" title=\"柯里化(Currying)\"></a>柯里化(Currying)</h3><p>柯里化是函数式编程的基础 主要的想法在于利用函数式编程的概念</p>\n<p>利用闭包的特性把原本是接受多个参数的函数封装成只接受一个参数的函数(单函数参数)</p>\n<p>后面再配合组合的方式使用compose函数 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curry</span>(<span class=\"params\">fn</span>)</span>&#123;  <span class=\"comment\">//这里用递归实现 考虑递归条件与递归出口</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeFn</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (args.length &lt; fn.length) &#123; <span class=\"comment\">//递归条件 - 当传入的参数的个数小于fn本身执行需要的参数的个数</span></span><br><span class=\"line\">      <span class=\"comment\">//高阶函数这里要return function</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...localArgs</span>) </span>&#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> makeFn(...[...args, ...localArgs]); <span class=\"comment\">//把上一层递归的args和本身收到的参数拼起来往下递归</span></span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> fn(...arguments); <span class=\"comment\">//递归出口 - 当传入的参数的个数等于执行函数所需要的参数的个数时 执行函数</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h3 id=\"组合函数-Compose-lodash\"><a href=\"#组合函数-Compose-lodash\" class=\"headerlink\" title=\"组合函数(Compose-lodash)\"></a>组合函数(Compose-lodash)</h3><p>把一组函数组合成数据管道 按照从右到左的次序依次执行</p>\n<p>所有被组合的函数都必须是单函数参数(多数是柯里化以后的函数)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compose</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> args.reverse().reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">acc, fn</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> fn(acc)</span><br><span class=\"line\">    &#125;, value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> reverse = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> arr.reverse()</span><br><span class=\"line\"><span class=\"keyword\">const</span> first  = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> arr[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> toUpperCase = <span class=\"function\">(<span class=\"params\">str</span>) =&gt;</span> str.toUpperCase()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> f = compose(toUpperCase, first, reverse)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f([<span class=\"string\">&#x27;ant&#x27;</span>, <span class=\"string\">&#x27;bat&#x27;</span>, <span class=\"string\">&#x27;cab&#x27;</span>])) <span class=\"comment\">// C B A</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Point-Free\"><a href=\"#Point-Free\" class=\"headerlink\" title=\"Point-Free\"></a>Point-Free</h3><p>在函数组合的基础上继续提升 从data-first 变成method-first </p>\n<p>用这样的方法来构造函数组合 构造时并不涉及数据 而执行时再把需要用到的数据传进去</p>\n<p>按照一定的步骤把小的函数给组合起来 实现特定的目的</p>\n<p>这里可以用loadsh里面的fp模块实现</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> firstLetterToUpper = fp.flowRight(</span><br><span class=\"line\">  fp.join(<span class=\"string\">&#x27;. &#x27;</span>),</span><br><span class=\"line\">  fp.map(fp.flowRight(fp.toUpper, fp.first())),</span><br><span class=\"line\">  fp.split(<span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(firstLetterToUpper(<span class=\"string\">&#x27;world wild web&#x27;</span>)) <span class=\"comment\">//W. W. W</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"函子-Functor\"><a href=\"#函子-Functor\" class=\"headerlink\" title=\"函子(Functor)\"></a>函子(Functor)</h3><h4 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h4><p>首先要明确一下这个概念的由来 </p>\n<p>在传统的函数式编程中 所有的函数均应该为纯函数 也就是说这些函数本身都是没有副作用的函数</p>\n<blockquote>\n<p>副作用：函数执行时不引起其他变量的变化，函数没有中间中间状态</p>\n</blockquote>\n<p>然而在实际应用中 除了功能单一的一些工具类的函数 大部分的函数都是为了业务构造的</p>\n<p>他们是不可能做到完全避免副作用的 所以函子的概念就诞生了</p>\n<p>函子把要被改变的变量和要改变这个变量的方法封装到听一个class中 </p>\n<p>在使用的时候从外部传入一个函数来执行想做的操作 同时这个操作也会返回一个新的函子 </p>\n<p>这样可以做到链式操作 <strong>函子之中包裹的这个值是永远不会被直接取出来操作的</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//简单的函子的演示</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Container</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//使用静态函数封装构造函数，这样外面调用的时候就不需要使用new</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">of</span> (value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Container(value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> (value) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>._value = value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  map (fn) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Container.of(fn(<span class=\"built_in\">this</span>._value))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//test</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> r = Container.of(<span class=\"number\">5</span>) <span class=\"comment\">//用5来初始化这个函子</span></span><br><span class=\"line\">\t\t\t\t\t\t.map(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> x + <span class=\"number\">1</span>) <span class=\"comment\">//值加一</span></span><br><span class=\"line\">\t\t\t\t\t\t.map(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> x * x) <span class=\"comment\">//36</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Maybe函子\"><a href=\"#Maybe函子\" class=\"headerlink\" title=\"Maybe函子\"></a>Maybe函子</h4><p>函子可以按照其功能或用法的特点归类成不同的函子   </p>\n<p>比如基本的函子里面是没有判断传入的value值是不是为空或者null的 </p>\n<p>所以可以在容器中加入判断 在value为空时不做任何处理 这样直接返回新函子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MayBe 函子</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MayBe</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">of</span> (value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MayBe(value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> (value) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>._value = value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  map (fn) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.isNothing() ? MayBe.of(<span class=\"literal\">null</span>) : MayBe.of(fn(<span class=\"built_in\">this</span>._value))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  isNothing () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>._value === <span class=\"literal\">null</span> || <span class=\"built_in\">this</span>._value === <span class=\"literal\">undefined</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> r = MayBe.of(<span class=\"string\">&#x27;Hello World&#x27;</span>)</span><br><span class=\"line\">\t\t\t\t\t.map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x.toUpperCase())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(r) <span class=\"comment\">//HELLO WORLD</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> r = MayBe.of(<span class=\"literal\">null</span>)</span><br><span class=\"line\">\t\t\t\t  .map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x.toUpperCase())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(r) <span class=\"comment\">//null</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"其他函子与常用库\"><a href=\"#其他函子与常用库\" class=\"headerlink\" title=\"其他函子与常用库\"></a>其他函子与常用库</h4><p>Either函子， IO函子， Task函子等等其他函子 </p>\n<p>具体写可以使用<a href=\"https://folktale.origamitower.com/\">FolkTale</a></p>\n<h2 id=\"函数式编程的面试题\"><a href=\"#函数式编程的面试题\" class=\"headerlink\" title=\"函数式编程的面试题\"></a>函数式编程的面试题</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arrat = [<span class=\"string\">&#x27;23&#x27;</span>, <span class=\"string\">&#x27;8&#x27;</span>, <span class=\"string\">&#x27;10&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">//用fp进行解答 会得到错误结果</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array.map(<span class=\"built_in\">parseInt</span>)) <span class=\"comment\">//[23, NaN, 2]</span></span><br></pre></td></tr></table></figure>\n\n<p>这里的错误是因为map函数本身的定义是这样的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> new_array = arr.map(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">currentValue[, index[, array]]</span>) </span>&#123;</span><br><span class=\"line\"> <span class=\"comment\">// Return element for new_array </span></span><br><span class=\"line\">&#125;[, thisArg])</span><br></pre></td></tr></table></figure>\n\n<p>详细解释</p>\n<blockquote>\n<p>callback</p>\n</blockquote>\n<p>生成新数组元素的函数，使用三个参数：</p>\n<ul>\n<li><p><code>currentValue</code></p>\n<p><code>callback</code> 数组中正在处理的当前元素</p>\n</li>\n<li><p><code>index</code>可选</p>\n<p><code>callback</code> 数组中正在处理的当前元素的索引</p>\n</li>\n<li><p><code>array</code>可选</p>\n<p><code>map</code> 方法调用的数组。</p>\n</li>\n</ul>\n<p>而parseInt的定义是这样的</p>\n<blockquote>\n<p>parseInt(string, radix);</p>\n</blockquote>\n<ul>\n<li><p><code>string</code></p>\n<p>要被解析的值。如果参数不是一个字符串，则将其转换为字符串(使用  <code>ToString </code>抽象操作)。字符串开头的空白符将会被忽略</p>\n</li>\n<li><p><code>radix</code> 可选</p>\n<p>从 <code>2</code> 到 <code>36</code>，表示字符串的基数。例如指定 16 表示被解析值是十六进制数。请注意，10不是默认值</p>\n</li>\n</ul>\n<p>也就是说当我们在调用parseInt的时候我们是没有指定radix的 </p>\n<p>而当radix取值为0， undefined或者null时parseInt不会以10进制来解析</p>\n<p>所以实际上当执行上一步操作时 真正得到的结果是这样的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;23&#x27;</span>, <span class=\"number\">0</span>) <span class=\"comment\">// parseInt没有第三个参数，所以map传递进来第三个参数array可以被忽略</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;8&#x27;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;10&#x27;</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//结果[23, NaN, 2]</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这个题可以用lodash中的map方法来做</p>\n<p><strong>注意</strong> 这里如果只用lodash中的普通的map方法也是会出问题的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> _ = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;lodash&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The `lodash/map` iteratee receives three arguments:</span></span><br><span class=\"line\"><span class=\"comment\">// (value, index|key, collection)</span></span><br><span class=\"line\">_.map([<span class=\"string\">&#x27;6&#x27;</span>, <span class=\"string\">&#x27;8&#x27;</span>, <span class=\"string\">&#x27;10&#x27;</span>], <span class=\"built_in\">parseInt</span>);</span><br><span class=\"line\"><span class=\"comment\">// ➜ [6, NaN, 2]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;lodash/fp&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The `lodash/fp/map` iteratee is capped at one argument:</span></span><br><span class=\"line\"><span class=\"comment\">// (value)</span></span><br><span class=\"line\">fp.map(<span class=\"built_in\">parseInt</span>)([<span class=\"string\">&#x27;6&#x27;</span>, <span class=\"string\">&#x27;8&#x27;</span>, <span class=\"string\">&#x27;10&#x27;</span>]);</span><br><span class=\"line\"><span class=\"comment\">// ➜ [6, 8, 10]</span></span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{"footer":"<div class=\"footer-custom\">\nTheme source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLXRoZW1lLW5leHQ=\">here</span><br>\nWebsite source code <span class=\"exturl theme-link\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG8tbmV4dC9oZXhvLW5leHQuZ2l0aHViLmlv\">here</span>\n</div>\n","languages":{"en":{"name":"English","subtitle":"To see the differences.","author":"Harvey Chen","description":"FrontEnd/BackEnd/DevOps"},"ru":{"name":"Русский","subtitle":"Тема для Hexo","author":"Тема NexT","description":"Ставь просто. Ставь NexT.","menu":{"News":"Новости","Docs":"Документация","Getting Started":"Начало работы","Theme Settings":"Настройки темы","Third Party Services":"Сторонние приложения","Algolia Search":"Поиск Algolia","Tag Plugins":"Плагины тэгов","Advanced Settings":"Расширенные настройки","FAQ's":"ЧаВо"}},"zh-TW":{"name":"Chinese"}},"sidebar":"<div class=\"cc-license animated\" itemprop=\"sponsor\">\n  <span class=\"exturl cc-opacity\" title=\"Deploy with Netlify → https://www.netlify.com\" data-url=\"aHR0cHM6Ly93d3cubmV0bGlmeS5jb20=\"><img width=\"80\" src=\"https://www.netlify.com/img/global/badges/netlify-dark.svg\" alt=\"Netlify\"></span>\n</div>\n","styles":".text-center {\n  text-align: center;\n}\n.site-author-image {\n  background: #fff;\n  background-clip: content-box;\n}\n","variables":""}},"length":3708,"excerpt":"<h2 id=\"函数式编程\"><a href=\"#函数式编程\" class=\"headerlink\" title=\"函数式编程\"></a>函数式编程</h2><h3 id=\"柯里化-Currying\"><a href=\"#柯里化-Currying\" class=\"headerlink\" title=\"柯里化(Currying)\"></a>柯里化(Currying)</h3><p>柯里化是函数式编程的基础 主要的想法在于利用函数式编程的概念</p>\n<p>利用闭包的特性把原本是接受多个参数的函数封装成只接受一个参数的函数(单函数参数)</p>\n<p>后面再配合组合的方式使用compose函数 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curry</span>(<span class=\"params\">fn</span>)</span>&#123;  <span class=\"comment\">//这里用递归实现 考虑递归条件与递归出口</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeFn</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (args.length &lt; fn.length) &#123; <span class=\"comment\">//递归条件 - 当传入的参数的个数小于fn本身执行需要的参数的个数</span></span><br><span class=\"line\">      <span class=\"comment\">//高阶函数这里要return function</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...localArgs</span>) </span>&#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> makeFn(...[...args, ...localArgs]); <span class=\"comment\">//把上一层递归的args和本身收到的参数拼起来往下递归</span></span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> fn(...arguments); <span class=\"comment\">//递归出口 - 当传入的参数的个数等于执行函数所需要的参数的个数时 执行函数</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"组合函数-Compose-lodash\"><a href=\"#组合函数-Compose-lodash\" class=\"headerlink\" title=\"组合函数(Compose-lodash)\"></a>组合函数(Compose-lodash)</h3><p>把一组函数组合成数据管道 按照从右到左的次序依次执行</p>\n<p>所有被组合的函数都必须是单函数参数(多数是柯里化以后的函数)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compose</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> args.reverse().reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">acc, fn</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> fn(acc)</span><br><span class=\"line\">    &#125;, value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> reverse = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> arr.reverse()</span><br><span class=\"line\"><span class=\"keyword\">const</span> first  = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> arr[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> toUpperCase = <span class=\"function\">(<span class=\"params\">str</span>) =&gt;</span> str.toUpperCase()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> f = compose(toUpperCase, first, reverse)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f([<span class=\"string\">&#x27;ant&#x27;</span>, <span class=\"string\">&#x27;bat&#x27;</span>, <span class=\"string\">&#x27;cab&#x27;</span>])) <span class=\"comment\">// C B A</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Point-Free\"><a href=\"#Point-Free\" class=\"headerlink\" title=\"Point-Free\"></a>Point-Free</h3><p>在函数组合的基础上继续提升 从data-first 变成method-first </p>\n<p>用这样的方法来构造函数组合 构造时并不涉及数据 而执行时再把需要用到的数据传进去</p>\n<p>按照一定的步骤把小的函数给组合起来 实现特定的目的</p>\n<p>这里可以用loadsh里面的fp模块实现</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> firstLetterToUpper = fp.flowRight(</span><br><span class=\"line\">  fp.join(<span class=\"string\">&#x27;. &#x27;</span>),</span><br><span class=\"line\">  fp.map(fp.flowRight(fp.toUpper, fp.first())),</span><br><span class=\"line\">  fp.split(<span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(firstLetterToUpper(<span class=\"string\">&#x27;world wild web&#x27;</span>)) <span class=\"comment\">//W. W. W</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"函子-Functor\"><a href=\"#函子-Functor\" class=\"headerlink\" title=\"函子(Functor)\"></a>函子(Functor)</h3><h4 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h4><p>首先要明确一下这个概念的由来 </p>\n<p>在传统的函数式编程中 所有的函数均应该为纯函数 也就是说这些函数本身都是没有副作用的函数</p>\n<blockquote>\n<p>副作用：函数执行时不引起其他变量的变化，函数没有中间中间状态</p>\n</blockquote>\n<p>然而在实际应用中 除了功能单一的一些工具类的函数 大部分的函数都是为了业务构造的</p>\n<p>他们是不可能做到完全避免副作用的 所以函子的概念就诞生了</p>\n<p>函子把要被改变的变量和要改变这个变量的方法封装到听一个class中 </p>\n<p>在使用的时候从外部传入一个函数来执行想做的操作 同时这个操作也会返回一个新的函子 </p>\n<p>这样可以做到链式操作 <strong>函子之中包裹的这个值是永远不会被直接取出来操作的</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//简单的函子的演示</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Container</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//使用静态函数封装构造函数，这样外面调用的时候就不需要使用new</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">of</span> (value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Container(value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> (value) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>._value = value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  map (fn) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Container.of(fn(<span class=\"built_in\">this</span>._value))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//test</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> r = Container.of(<span class=\"number\">5</span>) <span class=\"comment\">//用5来初始化这个函子</span></span><br><span class=\"line\">\t\t\t\t\t\t.map(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> x + <span class=\"number\">1</span>) <span class=\"comment\">//值加一</span></span><br><span class=\"line\">\t\t\t\t\t\t.map(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> x * x) <span class=\"comment\">//36</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Maybe函子\"><a href=\"#Maybe函子\" class=\"headerlink\" title=\"Maybe函子\"></a>Maybe函子</h4><p>函子可以按照其功能或用法的特点归类成不同的函子   </p>\n<p>比如基本的函子里面是没有判断传入的value值是不是为空或者null的 </p>\n<p>所以可以在容器中加入判断 在value为空时不做任何处理 这样直接返回新函子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MayBe 函子</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MayBe</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">of</span> (value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MayBe(value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> (value) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>._value = value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  map (fn) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.isNothing() ? MayBe.of(<span class=\"literal\">null</span>) : MayBe.of(fn(<span class=\"built_in\">this</span>._value))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  isNothing () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>._value === <span class=\"literal\">null</span> || <span class=\"built_in\">this</span>._value === <span class=\"literal\">undefined</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> r = MayBe.of(<span class=\"string\">&#x27;Hello World&#x27;</span>)</span><br><span class=\"line\">\t\t\t\t\t.map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x.toUpperCase())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(r) <span class=\"comment\">//HELLO WORLD</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> r = MayBe.of(<span class=\"literal\">null</span>)</span><br><span class=\"line\">\t\t\t\t  .map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x.toUpperCase())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(r) <span class=\"comment\">//null</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"其他函子与常用库\"><a href=\"#其他函子与常用库\" class=\"headerlink\" title=\"其他函子与常用库\"></a>其他函子与常用库</h4><p>Either函子， IO函子， Task函子等等其他函子 </p>\n<p>具体写可以使用<a href=\"https://folktale.origamitower.com/\">FolkTale</a></p>\n<h2 id=\"函数式编程的面试题\"><a href=\"#函数式编程的面试题\" class=\"headerlink\" title=\"函数式编程的面试题\"></a>函数式编程的面试题</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arrat = [<span class=\"string\">&#x27;23&#x27;</span>, <span class=\"string\">&#x27;8&#x27;</span>, <span class=\"string\">&#x27;10&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">//用fp进行解答 会得到错误结果</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array.map(<span class=\"built_in\">parseInt</span>)) <span class=\"comment\">//[23, NaN, 2]</span></span><br></pre></td></tr></table></figure>\n\n<p>这里的错误是因为map函数本身的定义是这样的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> new_array = arr.map(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">currentValue[, index[, array]]</span>) </span>&#123;</span><br><span class=\"line\"> <span class=\"comment\">// Return element for new_array </span></span><br><span class=\"line\">&#125;[, thisArg])</span><br></pre></td></tr></table></figure>\n\n<p>详细解释</p>\n<blockquote>\n<p>callback</p>\n</blockquote>\n<p>生成新数组元素的函数，使用三个参数：</p>\n<ul>\n<li><p><code>currentValue</code></p>\n<p><code>callback</code> 数组中正在处理的当前元素</p>\n</li>\n<li><p><code>index</code>可选</p>\n<p><code>callback</code> 数组中正在处理的当前元素的索引</p>\n</li>\n<li><p><code>array</code>可选</p>\n<p><code>map</code> 方法调用的数组。</p>\n</li>\n</ul>\n<p>而parseInt的定义是这样的</p>\n<blockquote>\n<p>parseInt(string, radix);</p>\n</blockquote>\n<ul>\n<li><p><code>string</code></p>\n<p>要被解析的值。如果参数不是一个字符串，则将其转换为字符串(使用  <code>ToString </code>抽象操作)。字符串开头的空白符将会被忽略</p>\n</li>\n<li><p><code>radix</code> 可选</p>\n<p>从 <code>2</code> 到 <code>36</code>，表示字符串的基数。例如指定 16 表示被解析值是十六进制数。请注意，10不是默认值</p>\n</li>\n</ul>\n<p>也就是说当我们在调用parseInt的时候我们是没有指定radix的 </p>\n<p>而当radix取值为0， undefined或者null时parseInt不会以10进制来解析</p>\n<p>所以实际上当执行上一步操作时 真正得到的结果是这样的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;23&#x27;</span>, <span class=\"number\">0</span>) <span class=\"comment\">// parseInt没有第三个参数，所以map传递进来第三个参数array可以被忽略</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;8&#x27;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;10&#x27;</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//结果[23, NaN, 2]</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这个题可以用lodash中的map方法来做</p>\n<p><strong>注意</strong> 这里如果只用lodash中的普通的map方法也是会出问题的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> _ = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;lodash&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The `lodash/map` iteratee receives three arguments:</span></span><br><span class=\"line\"><span class=\"comment\">// (value, index|key, collection)</span></span><br><span class=\"line\">_.map([<span class=\"string\">&#x27;6&#x27;</span>, <span class=\"string\">&#x27;8&#x27;</span>, <span class=\"string\">&#x27;10&#x27;</span>], <span class=\"built_in\">parseInt</span>);</span><br><span class=\"line\"><span class=\"comment\">// ➜ [6, NaN, 2]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;lodash/fp&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The `lodash/fp/map` iteratee is capped at one argument:</span></span><br><span class=\"line\"><span class=\"comment\">// (value)</span></span><br><span class=\"line\">fp.map(<span class=\"built_in\">parseInt</span>)([<span class=\"string\">&#x27;6&#x27;</span>, <span class=\"string\">&#x27;8&#x27;</span>, <span class=\"string\">&#x27;10&#x27;</span>]);</span><br><span class=\"line\"><span class=\"comment\">// ➜ [6, 8, 10]</span></span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckzle725f0001e3e27whsedr6","category_id":"ckzle725j0004e3e29yxdde1z","_id":"ckzle725n000ae3e2gdt0fxo6"},{"post_id":"ckzle725i0003e3e2fh73hsrt","category_id":"ckzle725m0007e3e282cqfnlt","_id":"ckzle725n000ce3e2deab3wjy"}],"PostTag":[{"post_id":"ckzle725f0001e3e27whsedr6","tag_id":"ckzle725k0005e3e26obt4wl2","_id":"ckzle725m0009e3e2a8bg1z1q"},{"post_id":"ckzle725i0003e3e2fh73hsrt","tag_id":"ckzle725m0008e3e20dfk4hz8","_id":"ckzle725n000be3e2af5rcp2p"}],"Tag":[{"name":"hexo","_id":"ckzle725k0005e3e26obt4wl2"},{"name":"javascript","_id":"ckzle725m0008e3e20dfk4hz8"}]}}